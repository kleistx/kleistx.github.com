<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xway]]></title>
  <link href="http://kleistx.github.com/atom.xml" rel="self"/>
  <link href="http://kleistx.github.com/"/>
  <updated>2012-06-02T22:39:00+08:00</updated>
  <id>http://kleistx.github.com/</id>
  <author>
    <name><![CDATA[xway]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dive Into Python 3 ：Notes 1]]></title>
    <link href="http://kleistx.github.com/blog/dive-into-python-notes-1/"/>
    <updated>2012-05-29T22:25:00+08:00</updated>
    <id>http://kleistx.github.com/blog/dive-into-python-notes-1</id>
    <content type="html"><![CDATA[<p>以下是我最近阅读<a href="http://woodpecker.org.cn/diveintopython3/table-of-contents.html#your-first-python-program">《深入python3》</a>后记的笔记。</p>

<h2>第一份Python程序</h2>

<h3>条件表达式</h3>

<p>C语言中的条件表达式是这样 <code>x = condition ? true_value : false_value</code><br/>
python中是这样 <code>x = true_value if condition else false_value</code>，例如：</p>

<pre><code>X = true if logging else flase
</code></pre>

<h3>文档字符串docstring</h3>

<p>紧跟在函数声明的下一行，用引号或三重引号包围，描述函数必备，在有些ide，当用鼠标指向函数名时，其docstring以tooltip的方式显示出来，很便利。<br/>
<a href="http://www.python.org/dev/peps/pep-0257/">PEP 257: Docstring</a> 约定解释了用什么来从大量的 docstring 中分辨出一个好的 docstring。</p>

<h3>异常</h3>

<p>在被调用程序中使用 raise 语句来抛出异常，在调用程序中使用 try&#8230;except 块来处理异常。</p>

<h3><code>__name__</code> 和 <code>__main__</code></h3>

<pre><code>if __name__ == '__main__'
</code></pre>

<p>这种写法的原理：模块是对象，所有的模块对象都有一个内置的属性 <code>__name__</code> ,如果import这个模块，那么<code>__name__</code>就等于这个模块的文件名（不包含路径和扩展名），但如果将此模块当做一个独立的程序来运行的话，<code>__name__</code> 将是一个特殊的默认值<code>__main__</code>，所以才用此if语句来判断。</p>

<h2>内置数据类型</h2>

<p>八大内置数据类型，booleans，numbers，strings，bytes，lists，tuples，sets，dictionaries。</p>

<p>用 type() 函数来检测任何值或变量的类型。<br/>
用 isinstance() 函数判断某个值或变量是否为给定某个类型。如：</p>

<pre><code>isinstance(1, int)
</code></pre>

<h3>常见数值运算</h3>

<p>其他的都和c语言差不多，除了这两个： <code>//</code>除后取整 ； <code>**</code>求幂运算 ；</p>

<h3>列表<code>[ ]</code></h3>

<ul>
<li>列表用 <code>[ ]</code> 来定义。</li>
<li>可用<code>list[-1]</code>来从反方向索引。</li>
<li>布尔上下文，空列表为false，有元素的列表为true。</li>
</ul>


<p>切片几种用法</p>

<pre><code>list[1:3] ; list[1:-1]; list[0:3]; list[:3]; list[3:]; list[:]      
</code></pre>

<p> list[:]是一个新列表，与list并不一样，只是拥有完全相同的元素，是对列表进行复制的一条捷径。</p>

<ul>
<li>增加元素

<ul>
<li>+号，<code>list+[2.0,3]</code>，此方法效率较低。</li>
<li>append()，<code>list.append(5)</code>，append只能添加一个元素。</li>
<li>insert()，<code>list.insert(2,'j')</code>，insert需要一个索引位置。</li>
<li>expend()，<code>list.extend(['four', 'Ω'])</code>，参数是列表，主要用于合并列表。</li>
</ul>
</li>
<li>删除元素

<ul>
<li>del，直接 <code>del list[1]</code> ，命令行用法。</li>
<li>remove()，<code>list.remove(item)</code> ，删除item的第一次出现。</li>
<li>pop(), <code>list.pop()</code> 删除最后的元素，<code>list.pop(2)</code>删除该索引位置的元素，此方法返回被pop的值。</li>
</ul>
</li>
<li>检索

<ul>
<li>count()，<code>list.count(item)</code> 返回item出现的次数。</li>
<li>in，<code>if x in list</code> 返回布尔值。</li>
<li>index()，<code>list.index(item)</code> 返回item的索引值。</li>
</ul>
</li>
</ul>


<h3>元组<code>( )</code></h3>

<p>以下是与list的相同点：</p>

<ul>
<li>元组用<code>（ ）</code>来定义，可以用<code>[ ]</code>来索引。</li>
<li>负索引同于列表。</li>
<li>布尔上下文同于列表。</li>
<li>切片同于列表。</li>
<li>索引，也可用count(),in,index()。</li>
</ul>


<p>以下是与list的不同点：</p>

<ul>
<li>创建单元素元组，须如此<code>（“a”，）</code>，加上逗号，python才认元组，否则认为括号多余。</li>
<li>元组不可修改，故无增加删除之方法。</li>
</ul>


<p><strong>元组的优点：</strong></p>

<p>可同时赋多个值</p>

<pre><code>v=('a',2,true)
(x,y,z) = v
</code></pre>

<p> 有多种用途，例如：</p>

<pre><code>(MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY)=range(7)
</code></pre>

<p>或者让函数返回元组，赋值给不同的变量。
* 进行遍历操作比列表快。
* “写保护”，让代码更安全。
*  可用作字典键，列表不行。
*  与列表可以相互转换，<code>tuple()</code>冻结列表，<code>list()</code>融合元组。</p>

<h3>集合<code>{ }</code></h3>

<ul>
<li>集合用 <code>{ }</code> 来定义，用此方法定义时，至少含一个元素，纯<code>{ }</code>是表示空字典。</li>
<li>创建空集合，用不带参数的<code>set()</code>，如 <code>a_set = set()</code> 不能用 <code>a_set = { }</code> 。</li>
<li>可用列表创建集合，如 <code>a_set = set(list)</code> 初始化。</li>
<li>集合装载唯一值，所以会自动消除重复元素。</li>
<li>增加元素

<ul>
<li>add()，增加单值，<code>a_set.add(11)</code>。</li>
<li>udate()，增加一个序列，list或者tuple，<code>a_set.update([10,30,59])</code>。</li>
</ul>
</li>
<li>删除元素

<ul>
<li>discard() ，删除单值，<code>a_set.discard(10)</code> ，若值不存在，无反应。</li>
<li>remove()，删除单值， <code>a_set.remove(21)</code>，若值不存在，抛出错误。</li>
<li>pop()，弹出单值并返回该值，是随机弹出。</li>
<li>clear()，清空集合。</li>
</ul>
</li>
</ul>


<h3>字典<code>{ }</code></h3>

<ul>
<li>集合装载唯一值，所以会自动消除重复元素。</li>
</ul>


<p>同一字典的值可以装入不同数据类型和任何对象，但是键只能是数据类型，如：</p>

<pre><code>{1000: ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
 1024: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']}
</code></pre>

<ul>
<li>可以使用<code>len()</code>和<code>in</code>。</li>
<li>可以使用类似集合的增加和减少元素的方法。</li>
</ul>


<h2>推导式</h2>

<p>紧凑，直观，有点像sql语句。</p>

<h3>列表推导式</h3>

<p>对某列表中每个元素应用一个函数，将其映射到另一个列表。<br/>
将a_list中的元素乘以3</p>

<pre><code>[elem * 3 for elem in a_list]
</code></pre>

<p>将当前目录下所有xml文件加上全路径</p>

<pre><code>[os.path.realpath(f) for f in glob.glob('*.xml')]  
</code></pre>

<p>过滤列表，返回当前目录下所有大小大于6000字节的py文件</p>

<pre><code>[f for f in glob.glob('*.py') if os.stat(f).st_size &gt; 6000]
</code></pre>

<p>返回元组列表，每个元组包含文件字节数和绝对路径</p>

<pre><code>[(os.stat(f).st_size, os.path.realpath(f)) for f in glob.glob('*.xml')] 
</code></pre>

<h3>字典推导式</h3>

<p>与列表推导式不同之处有两点：<br/>
1.被花括号包围而非方括号。 <br/>
2.对于每个元素它包含由冒号分隔的两个表达式。冒号前为键，其后为值。</p>

<pre><code>{f:os.stat(f) for f in glob.glob('*.py')}
</code></pre>

<p>也可以加上if形成过滤字典</p>

<pre><code>{os.path.splitext(f)[0]:humansize.approximate_size(meta.st_size) \ 
     for f, meta in metadata_dict.items() if meta.st_size &gt; 6000} 
</code></pre>

<p>小技巧，交换字典的键和值</p>

<pre><code>{value:key for key, value in a_dict.items()}
</code></pre>

<h3>集合推导式</h3>

<p>与列表推导式和字典推导式类似，其输入不一定是集合，可以是任何序列：</p>

<pre><code> {2**x for x in range(10)} 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress折腾记]]></title>
    <link href="http://kleistx.github.com/blog/octopresszhe-teng-ji/"/>
    <updated>2012-05-13T17:36:00+08:00</updated>
    <id>http://kleistx.github.com/blog/octopresszhe-teng-ji</id>
    <content type="html"><![CDATA[<p>年初，发现很多技术博客（特别是喜好ruby的）都换了新面孔，简洁大气，开始还以为是wordpress的new theme，后来发现不是，他们用了Ocotopress，其中贴代码的部分十分漂亮，让我心动不已，自己本来有个wordpress的博客在SAE上，但老要买云豆很不爽，于是也摆弄摆弄Octopress，顺便把尘封已久的github账号拿出来抖抖灰，抽空折腾了两天，小记一下，我是将其部署至github，本地系统为mac，整个过程参考了<a href="http://octopress.org/docs/deploying/">此处</a>。</p>

<h3>了解</h3>

<ul>
<li><a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/">Why Octopress?</a></li>
<li><a href="http://wowubuntu.com/markdown/#autoescape">Markdown语法</a></li>
</ul>


<h3>环境</h3>

<p>如果你已经安装了最新的git和ruby，请忽略。</p>

<ul>
<li><a href="http://ihower.tw/rails3/installation.html">安装最新的ruby</a></li>
<li><a href="http://book.51cto.com/art/201107/278761.htm">使用homebrew在mac下安装git </a></li>
</ul>


<h3>github</h3>

<ul>
<li>注册github账号，这个很简单，不多说。</li>
<li><a href="http://help.github.com/create-a-repo/">创建一个repository</a>，如果你的账号形如 username，你创建的这个repository名称应为username.github.com，切记。</li>
<li><a href="http://help.github.com/mac-set-up-git/">设置你在github上的ssh key</a></li>
</ul>


<h3>安装Octopress</h3>

<h4>下载Octopress</h4>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress # 如果使用 RVM, 这里将会询问是否信任该 .rvmrc (选yes).
ruby --version # 应该大于 Ruby 1.9.2
</code></pre>

<p> .rvmrc文件中默认的ruby版本是1.9.2，假如你的ruby版本高于1.9.2，修改它。</p>

<h4>安装相应的gem</h4>

<pre><code>bundle update
</code></pre>

<h4>生成模板文件</h4>

<pre><code>rake install
</code></pre>

<h3>部署至github</h3>

<h4>连接至github</h4>

<pre><code>rake setup_github_pages
</code></pre>

<p>  输入url地址，形如</p>

<pre><code>git@github.com:username/username.github.com.git
</code></pre>

<h4>生成静态页面</h4>

<pre><code>rake generate
</code></pre>

<h4>本地预览</h4>

<pre><code>rake preview 
</code></pre>

<p>访问http://localhost:4000 查看本地效果，用ctrl+c可结束  。</p>

<h4>部署</h4>

<pre><code>rake deploy
</code></pre>

<p>访问 http://username.github.com 查看博客服务器效果  。</p>

<h3>更新Octopress</h3>

<p>每过一段时间，可能需要<a href="http://octopress.org/docs/updating/">更新一下Octopress版本</a>，使之保持最新。</p>

<h3>配置博客信息</h3>

<p>修改Octopress/_config.yml，参考http://octopress.org/docs/configuring/ ，示例如下，若包含中文，请将文件格式保存成utf-8的格式。</p>

<pre><code>url: http://kleistx.github.com/
title: Xway
subtitle: 
author: xway
simple_search: http://google.com/search
description:
</code></pre>

<h3>创建新文章</h3>

<pre><code>rake new_post["article name"]
</code></pre>

<p>文章创建后，可在source/_post文件夹下找到，推荐使用<a href="http://mouapp.com/">Mou</a>编辑，更新之后需要重新生成静态页面，并重新部署。</p>

<pre><code>rake generate
rake deploy
</code></pre>

<h3>使用Disqus评论系统</h3>

<p>注册一个Disqus账号，记住shortname，然后打开”_config.yml”，找到disqus相关的配置项，修改即可：</p>

<pre><code>#Disqus Comments
disqus_short_name: xway
disqus_show_comment_count: true
</code></pre>

<p>记住冒号后面是有空格的。</p>

<h3>贴代码</h3>

<p>Octopress使用了pygments，所以支持多种编程语言的代码，具体方法见<a href="http://octopress.org/docs/plugins/codeblock/">此处</a>，我常用的方式是：</p>

<pre><code>｛% codeblock %｝
  Awesome code snippet
｛% endcodeblock  %｝
</code></pre>

<p>效果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<pre><code>｛% codeblock Time to be Awesome - awesome.rb %｝
  puts "Awesome!" unless lame
｛% endcodeblock %｝
</code></pre>

<p>效果如下：</p>

<figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Awesome!&quot;</span> <span class="k">unless</span> <span class="n">lame</span>
</span></code></pre></td></tr></table></div></figure>


<h3>添加新页面</h3>

<p>例如在导航中增加<code>'About'</code>  ,首先：</p>

<pre><code>rake new_page["page name"]
</code></pre>

<p>会在在source下新建about目录，并在里面添加<code>index.markdown</code>文件。<br/>
然后，编辑导航条<code>source/_includes/custom/navigation.html</code>  ，添加上</p>

<pre><code>&lt;li&gt;&lt;a href="http://kleistx.github.com/about"&gt;About&lt;/a&gt;&lt;/li&gt;  
</code></pre>

<h3>首页只显示摘要</h3>

<p>在文中加入<code>&lt;!--more--&gt;</code>来控制摘要截取位置。<br/>
修改_config.yml里的excerpt_link。</p>

<h3>修改标题字体</h3>

<p>先去<a href="http://www.google.com/webfonts">google webfonts</a>挑两款字体，将生成的链接拷贝下来，加入 <code>/source/_includes/custom/head.html</code> 。<br/>
然后修改 <code>sass/custom/_font.scss</code>，分别将标题和副标题的字体设置为刚才挑选的两款。</p>

<h3>保存源代码</h3>

<p>在项目里建立source分支用于保存所有的代码（配置，sass，文章）。</p>

<pre><code>git add .
git commit -m 'blog'
git push origin source
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac常用第三方软件推荐]]></title>
    <link href="http://kleistx.github.com/blog/macchang-yong-di-san-fang-ruan-jian-tui-jian/"/>
    <updated>2012-05-12T23:45:00+08:00</updated>
    <id>http://kleistx.github.com/blog/macchang-yong-di-san-fang-ruan-jian-tui-jian</id>
    <content type="html"><![CDATA[<h3>编程工具</h3>

<p>xcode：mac下编译软件必备。<br/>
python：我最喜欢的编程利器。<br/>
pip：方便安装第三方python包。  <br/>
ruby：和python一样是语言中的战斗机。  <br/>
homebrew：依赖ruby，方便安装卸载很多编程工具。  <br/>
iterm2：增强终端。<br/>
github for mac：github官方出品的git客户端。  <br/>
color Exploer：取色器。 <br/>
go2shell：在finder中打开终端并转入当前目录。  <br/>
snippets：代码片段收集工具。<br/>
navicat for mysql lite：老牌数据库管理工具。</p>

<h3>浏览器</h3>

<p>chrome：有诸多插件。</p>

<h3>中文输入法</h3>

<p>搜狗拼音：相比fit和QQ输入法，这个更适合我。</p>

<h3>编辑器和IDE</h3>

<p>textmate：神器一枚，由于dhh的推荐，路人皆知。 <br/>
sublime text 2:类textmate编辑器，跨平台，支持中文，有取代textmate之势。<br/>
chocolat：类textmate编辑器，不过现在还是测试版。<br/>
pycharm：python编程IDE，是目前使用最顺手的一个。   <br/>
coderunner：编程利器，功能比textmate稍逊，轻便且使用简单。<br/>
cssedit：编辑css专用。<br/>
coda 2：编辑html用。<br/>
mou：使用makedown语法，写文章专用。</p>

<h3>办公套件</h3>

<p>iwork09：包括keynote、pages、和numbers。    <br/>
office 2011：微软的办公套件。</p>

<h3>效率工具</h3>

<p>evernote：免费版已够用，记录笔记，支持云同步。<br/>
everbox：类似dropbox，盛大云存储客户端。 <br/>
google drive：google的云端硬盘。 <br/>
mind note：思维导图工具。<br/>
alfred：快速启动工具，类似windows下launchy。</p>

<h3>阅读器</h3>

<p>chmox：阅读chm格式文件。<br/>
reeder：google reader客户端。    <br/>
cappuccino：另一个reeder，目前测试中。<br/>
readlater：收集文章，待有空时慢慢看。 <br/>
ocrkit：转换扫描版pdf成文字版。</p>

<h3>多媒体</h3>

<p>mplayerx：开源媒体播放器，通杀所有格式。<br/>
pptv网络电视：在线看电影。<br/>
vox：音频播放器，短小精悍。<br/>
diumoo：豆瓣电台客户端。<br/>
guitar pro：吉他六线谱编辑和播放软件，学吉他必备。    <br/>
screenflow：录屏软件。</p>

<h3>图形图像</h3>

<p>skitch：简单图片处理，和evernote出自同一公司。<br/>
picasa：google出品的非常智能的图片库软件。  <br/>
xee：看图软件。</p>

<h3>虚拟机</h3>

<p>vmware fusion：和windows下的vmware一样出名。</p>

<h3>上传下载工具</h3>

<p>迅雷：比windows下的迅雷简洁的多，支持bt和电驴。  <br/>
sitesucker：下载整个网站。</p>

<h3>系统工具</h3>

<p>1password：密码管理必备。  <br/>
cleanmymac：系统清理软件。 <br/>
ccleaner：系统垃圾清理。<br/>
appfresh：系统软件更新。<br/>
day-o：替换系统时间工具。 <br/>
memoryfree 2 :内存释放工具。<br/>
simonfree：网络工具。</p>

<h3>即时通讯</h3>

<p>qq：无法逃避的腾讯客户端。<br/>
ipmessenger：mac下的飞鸽传书。<br/>
macbo：新浪微博客户端。</p>

<h3>其他</h3>

<p>google earth：研究世界。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旧日读书时光]]></title>
    <link href="http://kleistx.github.com/blog/jiu-ri-du-shu-shi-guang/"/>
    <updated>2012-05-11T00:01:00+08:00</updated>
    <id>http://kleistx.github.com/blog/jiu-ri-du-shu-shi-guang</id>
    <content type="html"><![CDATA[<p>最怀恋小时候的那些闲暇时光，世界充满了不可知，了解外界的窗口仅仅就是电视机，没有身处于时代洪流中的匆忙，得以慢慢的学习，那是何等的惬意啊，为了一点小知而洋洋得意，抓住什么书就了解什么，不管他是翻译晦涩的，还是文笔粗陋的，还是不明逻辑的，统统并收。那时看了很多其实很有意思，但今天决不会再花时间的书。<br/>
今天的时间总是不够用，似乎要把时间留给最重要的学问，最有用的技术，渐渐的反而看书的范围越来越窄，无法突破了。</p>
]]></content>
  </entry>
  
</feed>
